- name: CachyOS System Setup
  hosts: localhost
  become: true
  connection: local
  gather_facts: true

  vars_files:
    - packages.yml

  vars:
    chaotic_aur_key: "3056513887B78AEB"
    remote_regular_user: "{{ lookup('env', 'USER') }}"
    install_aur_packages: true
    install_flatpak_packages: true

  tasks:

    # GNOME Settings Configuration
    - name: Configure GNOME Settings with gsettings
      become: yes
      become_user: "{{ remote_regular_user }}"
      ansible.builtin.shell: "{{ item }}"
      loop:
        # Dark Mode
        - gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'
    
        # Nautilus List View Settings
        - gsettings set org.gnome.nautilus.list-view default-column-order "['name', 'size', 'type', 'date_modified']"
        - gsettings set org.gnome.nautilus.list-view default-visible-columns "['name', 'size', 'type', 'date_modified']"
        - gsettings set org.gnome.nautilus.list-view use-tree-view false
    
        # Nautilus Preferences
        - gsettings set org.gnome.nautilus.preferences click-policy 'double'
        - gsettings set org.gnome.nautilus.preferences date-time-format 'detailed'
        - gsettings set org.gnome.nautilus.preferences default-folder-viewer 'list-view'
        - gsettings set org.gnome.nautilus.preferences recursive-search 'always'
        - gsettings set org.gnome.nautilus.preferences search-filter-time-type 'last_modified'
        - gsettings set org.gnome.nautilus.preferences default-sort-order 'name'
        - gsettings set org.gnome.nautilus.preferences default-sort-in-reverse-order false
    
        # GTK File Chooser Settings
        - gsettings set org.gtk.gtk4.Settings.FileChooser show-hidden true
        - gsettings set org.gtk.Settings.FileChooser sort-directories-first true
        - gsettings set org.gtk.gtk4.Settings.FileChooser sort-directories-first true
    
        # Gnome Settings
        - gsettings set org.gnome.mutter dynamic-workspaces false
        - gsettings set org.gnome.desktop.wm.preferences num-workspaces 3
        - gsettings set org.gnome.mutter workspaces-only-on-primary true
        - gsettings set org.gnome.SessionManager logout-prompt false

        # Ptyxis Settings
        - gsettings set org.gnome.Ptyxis.Shortcuts copy-clipboard '<Super>c' 
        - gsettings set org.gnome.Ptyxis.Shortcuts paste-clipboard '<Ctrl>v'

        # Window State
       # - gsettings set org.gnome.nautilus.window-state initial-size "(890, 550)"

        # TextEditor Settings
        - gsettings set org.gnome.TextEditor show-line-numbers true
        - gsettings set org.gnome.TextEditor highlight-current-line true
        - gsettings set org.gnome.TextEditor show-map true
      changed_when: false

    - name: Load dconf settings
      become: yes
      become_user: "{{ remote_regular_user }}"
      shell: |
        dconf load /org/gnome/settings-daemon/plugins/media-keys/ < /home/{{ remote_regular_user }}/.config/dconf/gnome-shortcuts.dconf 
      changed_when: false

    - name: Load dconf Shell settings
      become: yes
      become_user: "{{ remote_regular_user }}"
      environment:
        XDG_RUNTIME_DIR: "/run/user/1000"
        DBUS_SESSION_BUS_ADDRESS: "unix:path=/run/user/1000/bus"
      shell: |
        dconf load /org/gnome/shell/ < /home/{{ remote_regular_user }}/.config/dconf/shell-settings.dconf
        dconf load /org/gnome/desktop/ < /home/{{ remote_regular_user }}/.config/dconf/desktop-settings.dconf
      changed_when: false

    #- name: Load dconf shortcuts
    #  become: yes
    #  become_user: "{{ remote_regular_user }}"
    #  shell: |
    #    dconf load /org/gnome/settings-daemon/plugins/media-keys/ < /home/{{ remote_regular_user }}/.config/dconf/gnome-shortcuts.dconf
    #  changed_when: false

    # Zusätzliche Einstellungen mit dconf
    #- name: Configure additional settings with dconf
    #  become: yes
    #  become_user: "{{ remote_regular_user }}"
    #  dconf:
    #    key: "{{ item.key }}"
    #    value: "{{ item.value }}"
    #    state: present
    #  loop:
    #    - { key: "/org/gnome/nautilus/sort-directories-first", value: "true" }
    #    - { key: "/org/gnome/nautilus/show-hidden-files", value: "true" }

    - name: Check if Chaotic AUR is already configured
      command: grep -c "^\[chaotic-aur\]" /etc/pacman.conf
      register: chaotic_aur_check
      changed_when: false
      failed_when: false

    - name: Include dotfiles tasks
      include_tasks: config.yml

    # Chaotic AUR Setup
    - name: Set up Chaotic AUR
      when: chaotic_aur_check.stdout == "0"
      block:
        - name: Import and sign Chaotic AUR key
          shell: |
            pacman-key --recv-key {{ chaotic_aur_key }} --keyserver keyserver.ubuntu.com
            pacman-key --lsign-key {{ chaotic_aur_key }}
          changed_when: false

        - name: Install Chaotic keyring and mirrorlist
          command: pacman -U --noconfirm --overwrite "*" https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst

        - name: Add Chaotic AUR to pacman.conf
          blockinfile:
            path: /etc/pacman.conf
            block: |
              [chaotic-aur]
              Include = /etc/pacman.d/chaotic-mirrorlist
            marker: "# {mark} CHAOTIC AUR REPO added by ansible"

    # System Updates and Package Installation
    - name: System update
      pacman:
        update_cache: yes
        upgrade: yes

    - name: Install packages
      pacman:
        name: "{{ pacman_packages }}"
        state: present
        extra_args: "--noconfirm --noprogressbar"

    - name: Check if there are AUR packages to install
      set_fact:
        active_aur_packages: "{{ aur_packages | default([]) | select() | list }}"

    - name: Install AUR packages
      become: yes
      become_user: "{{ remote_regular_user }}"
      ansible.builtin.command:
        cmd: "paru -S --needed --noconfirm {{ item }}"
      loop: "{{ (aur_packages | default([])) | select('string') | list }}"
      when: 
        - install_aur_packages | bool
        - (aur_packages | default([])) | select('string') | list | length > 0
      
    # Theme Installation Checks
    - name: Check for existing themes
      block:
        - name: Check if Bibata cursor theme exists
          stat:
            path: "/home/{{ remote_regular_user }}/.icons/Bibata-Modern-Classic"
          register: bibata_check
          changed_when: false
          failed_when: false

        - name: Check if Numix Circle exists
          stat:
            path: "/home/{{ remote_regular_user }}/.icons/Numix-Circle"
          register: numix_check
          changed_when: false
          failed_when: false

    # Theme Installation
    - name: Ensure required packages for themes
      when: not bibata_check.stat.exists or not numix_check.stat.exists
      block:
        - name: Install git package
          pacman:
            name: git
            state: present

        - name: Create .icons directory
          file:
            path: "/home/{{ remote_regular_user }}/.icons"
            state: directory
            mode: '0755'
            owner: "{{ remote_regular_user }}"
            group: "{{ remote_regular_user }}"

    # Bibata Theme Installation
    - name: Install Bibata cursor theme
      when: not bibata_check.stat.exists
      block:
        - name: Download cursor theme
          get_url:
            url: "https://github.com/ful1e5/Bibata_Cursor/releases/download/v2.0.5/Bibata-Modern-Classic.tar.xz"
            dest: "/tmp/Bibata-Modern-Classic.tar.xz"
            mode: '0644'

        - name: Extract cursor theme
          unarchive:
            src: "/tmp/Bibata-Modern-Classic.tar.xz"
            dest: "/home/{{ remote_regular_user }}/.icons/"
            remote_src: yes
            owner: "{{ remote_regular_user }}"
            group: "{{ remote_regular_user }}"

        - name: Clean up cursor theme archive
          file:
            path: "/tmp/Bibata-Modern-Classic.tar.xz"
            state: absent

    # Numix Theme Installation
    - name: Install Numix Circle icons
      when: not numix_check.stat.exists
      block:
        - name: Clone Numix Circle repository
          git:
            repo: 'https://github.com/numixproject/numix-icon-theme-circle.git'
            dest: '/tmp/numix-circle'
            depth: 1

        - name: Copy Circle theme
          copy:
            src: "/tmp/numix-circle/Numix-Circle"
            dest: "/home/{{ remote_regular_user }}/.icons/"
            remote_src: yes
            owner: "{{ remote_regular_user }}"
            group: "{{ remote_regular_user }}"

        - name: Clean up Numix repository
          file:
            path: "/tmp/numix-circle"
            state: absent

    # Shell Configuration
    - name: Change shell to zsh
      user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh

    # Flatpak Setup
    - name: Setup Flatpak and Flathub
      block:
        - name: Install Flatpak
          pacman:
            name: flatpak
            state: present

        - name: Add Flathub repository
          command: flatpak remote-add --system --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
          changed_when: false

        - name: Install Flatpak packages
          flatpak:
            name: "{{ item }}"
            state: present
            method: system
          with_items: "{{ flatpak_packages | default([]) }}"
          when:
            - install_flatpak_packages | bool
    # Timezone Setup
    - name: Set timezone
      timezone:
        name: Europe/Vienna

    # Keyboard Layout Setup
    - name: Set keyboard layout to German (Austria)
      command: localectl set-keymap de  # oder 'de' für Deutschland
      #command: localectl set-x11-keymap de at  # Alternative für X11        

    # Keyboard Shortcuts Setup
    #- name: Ensure dconf is installed
    #  pacman:
    #    name: dconf
    #    state: present

    #- name: Create dconf directory
    #  file:
    #    path: "/home/{{ remote_regular_user }}/.config/dconf"
    #    state: directory
    #    owner: "{{ remote_regular_user }}"
    #    group: "{{ remote_regular_user }}"
    #    mode: '0755'

    #- name: Copy dconf shortcuts file
    #  copy:
    #    src: "/home/{{ remote_regular_user }}/.bootstrap/kb_shortcuts.dconf"
    #    dest: "/home/{{ remote_regular_user }}/.config/dconf/gnome-shortcuts.dconf"
    #    owner: "{{ remote_regular_user }}"
    #    group: "{{ remote_regular_user }}"
    #    mode: '0644'

    - name: Configure OpenVPN
      vars:
        configure_vpn: true
        vpn_configs:
          - AT.ovpn
          - DE.ovpn
          - HU.ovpn
          - IT.ovpn
      block:
        - name: Check if VPN connection exists
          become: yes
          become_user: "{{ remote_regular_user }}"
          command: "nmcli connection show {{ item | splitext | first }}"
          register: vpn_check
          failed_when: false
          changed_when: false
          loop: "{{ vpn_configs }}"
          when: configure_vpn | bool

        - name: Import VPN configurations to NetworkManager
          become: yes
          become_user: "{{ remote_regular_user }}"
          command: "nmcli connection import type openvpn file '/home/{{ remote_regular_user }}/.config/openvpn/{{ item }}'"
          register: nmcli_result
          failed_when: false
          loop: "{{ vpn_configs }}"
          when: >
            configure_vpn | bool and 
            vpn_check.results is defined and 
            vpn_check.results | selectattr('item', 'equalto', item) | list | length > 0 and 
            (vpn_check.results | selectattr('item', 'equalto', item) | list | first).rc != 0

    - name: Configure Nautilus Terminal Integration
      block:
        - name: Backup original nautilus terminal extension
          command: mv /usr/lib/nautilus/extensions-4/libterminal-nautilus.so /usr/lib/nautilus/extensions-4/libterminal-nautilus.so.bak
          args:
            creates: /usr/lib/nautilus/extensions-4/libterminal-nautilus.so.bak
            removes: /usr/lib/nautilus/extensions-4/libterminal-nautilus.so
        
        - name: Set default terminal to ptyxis
          become: yes
          become_user: "{{ remote_regular_user }}"
          dconf:
            key: "/com/github/stunkymonkey/nautilus-open-any-terminal/terminal"
            value: "'ptyxis'"
            state: present

        - name: Enable new tab option
          become: yes
          become_user: "{{ remote_regular_user }}"
          dconf:
            key: "/com/github/stunkymonkey/nautilus-open-any-terminal/new-tab"
            value: "true"
            state: present

        - name: Check if Nautilus is running
          become: yes
          become_user: "{{ remote_regular_user }}"
          shell: pgrep nautilus
          register: nautilus_check
          changed_when: false
          failed_when: false

        - name: Restart Nautilus if running
          become: yes
          become_user: "{{ remote_regular_user }}"
          command: killall nautilus
          when: nautilus_check.rc == 0


    # Desktop Background Setup
    - name: Set desktop background
      become: yes
      become_user: "{{ remote_regular_user }}"
      command: gsettings set org.gnome.desktop.background picture-uri "file:///home/{{ remote_regular_user }}/.config/background"
      
    - name: Set desktop background (dark variant)
      become: yes
      become_user: "{{ remote_regular_user }}"
      command: gsettings set org.gnome.desktop.background picture-uri-dark "file:///home/{{ remote_regular_user }}/.config/background"

    #- name: Configure NetworkManager to disable IPv6 globally
    #  copy:
    #    dest: /etc/NetworkManager/conf.d/disable-ipv6.conf
    #    content: |
    #      [connection]
    #      ipv6.method=disabled
    #      ipv6.ip6-privacy=disabled
    #      ipv6.addr-gen-mode=disabled
    #    mode: '0644'

 #   - name: Restart NetworkManager
 #     systemd:
 #       name: NetworkManager
 #       state: restarted

 # Disable IPv6 for all network connections (LAN and WiFi)
    - name: Get list of all network connections
      become: yes
      become_user: "{{ remote_regular_user }}"
      shell: nmcli -t -f NAME,TYPE connection show | grep -E '*ethernet|*wireless' | cut -d':' -f1
      register: network_connections
      changed_when: false

    - name: Debug - Show found connections
      debug:
        msg: "Found connections: {{ network_connections.stdout_lines }}"

    - name: Disable IPv6 for each network connection
      become: yes
      become_user: "{{ remote_regular_user }}"
      shell: |
        nmcli connection modify "{{ item }}" ipv6.method "disabled"
      loop: "{{ network_connections.stdout_lines }}"
      when: network_connections.stdout_lines | length > 0

    - name: Restart NetworkManager
      systemd:
        name: NetworkManager
        state: restarted